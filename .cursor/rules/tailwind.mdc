---
description: 
globs: 
alwaysApply: true
---
# 🧱 Avoid Duplicating **className** in Reusable Components

Before creating a new component in Figma, **check if it already exists**. For example, if you need a button, look for the `Button` component.

Avoid manually adding `className` with styles such as `border-radius` (`rounded-md`), `color` (`text-white`, `text-gray-800`), `background-color` (`bg-blue-600`, `bg-red-500`), `padding` (`px-4`, `py-2`, `p-3`), `font-size` (`text-sm`, `text-lg`), etc., if these styles are **already included in the component** (e.g., `Button`) through its variants — they are **already part of the internally generated `className`**.

> 🎯 If the style is already present in the variant, it **will be reflected in the generated `className`**, and **does not need to be manually reapplied**.

## ❌ Incorrect (repeating already existing styles)

The `Button` component was used, but styles were manually reapplied via `className`, which is redundant and may lead to inconsistencies:

```tsx
<Button className="bg-blue-600 text-white px-4 py-2 rounded-md font-medium">
  Salvar
</Button>
```

## ✅ Correct (using the variant with a clean className)

When using the Button component with the primary variant, there's no need to reapply styles. The internally generated className already includes the visual tokens:

```tsx
<Button variant="primary">
  Salvar
</Button>
```

---

# 🎯 Prompt: Exporting Components and Screens from Figma Using Tailwind with Consistency

Whenever you're creating components or screens based on a Figma design, **do not copy values literally**.  
Before applying any color, size, spacing, border, typography, etc., check whether the value is already **defined in the project theme** (e.g., `globals.css`).  
If it is, **use the theme token**.  
If it’s not, **use the closest available value** from the design system.

---

## ✅ General Rules

- 🔍 **Check the theme (`globals.css`) before applying any class.**
- 🎨 **Use Tailwind classes only with values defined in the theme.**
- 🧠 **If the value in Figma is slightly different (e.g., `42px`) and not in the theme, choose the closest value** (e.g., `40px`).
- 📏 **Tailwind sizing uses a spacing scale based on 0.25rem (4px), but note the difference in scale between spacing and sizing utilities:**  
  - For **padding/margin** classes (`p-`, `m-`), the number represents multiples of 0.25rem:  
    `p-1 = 0.25rem = 4px`, `p-2 = 0.5rem = 8px`, `p-4 = 1rem = 16px`, etc.  
  - For **width/height** classes (`w-`, `h-`), the number represents multiples of 0.25rem but in different increments:  
    `w-10 = 2.5rem = 40px`, `w-40 = 10rem = 160px`.  
  Therefore, for a height or width close to 40px, use `h-10` or `w-10`. For padding close to 16px, use `px-4`.
- ⛔ **Avoid “magic values” like `17px`, `#3A57E8`, `41.25px`, etc.**

### ❌ Wrong (copying raw values from Figma)

```tsx
<button
  style={{
    backgroundColor: '#3A57E8',
    height: '42px',
    padding: '10px 18px',
    borderRadius: '6px',
    fontSize: '15px',
    fontWeight: 500,
  }}
>
  Save
</button>
```

### ✅ Correct (using theme values in Tailwind)

```tsx
<button className="bg-primary h-10 px-4 py-2 rounded-md text-base font-medium">
  Save
</button>
```

| Property           | Figma   | Tailwind Used      | Justification                         |
| ------------------ | ------- | ------------------ | ------------------------------------- |
| Color              | #3A57E8 | `bg-primary`       | Color already defined in the theme    |
| Height             | 42px    | `h-10` (40px)      | Closest available value in the system |
| Horizontal padding | 18px    | `px-4` (16px)      | Closest standard spacing value        |
| Vertical padding   | 10px    | `py-2` (8px)       | Closest standard spacing value        |
| Border radius      | 6px     | `rounded-md`       | Equivalent value in the theme         |
| Font size          | 15px    | `text-base` (16px) | 1px difference, visually negligible   |
| Font weight        | 500     | `font-medium`      | Equivalent value                      |

