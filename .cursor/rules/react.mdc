---
description: 
globs: 
alwaysApply: true
---
# üö´ Avoid `export default` in Common Components

Avoid using `export default` for components **that are not Next.js pages**. Prefer **named exports** (`export const`). Ihis improves autocompletion, refactoring, and reduces ambiguity in imports.

## ‚ùå Wrong (with `export default` in a common component)

```tsx
const MyComponent = ({ text }: MyComponentProps) => {
  return <div>{text}</div>;
};

export default MyComponent;
```

Using `export default` hinders automatic refactoring and allows inconsistent renaming during import.

## ‚úÖ Correct (with `export const`)

```tsx
export const MyComponent = ({ text }: MyComponentProps) => {
  return <div>{text}</div>;
};
```

---

# üé® Icon Imports

Always use `as` to rename imported icons. This improves clarity of the icon's purpose in context, avoiding generic or ambiguous names in the code scope.

## ‚ùå Wrong (direct import without renaming)

```tsx
import { FaSignOutAlt } from "react-icons/fa";

<FaSignOutAlt />
```

The original icon name might not be clear in the context. Also, generic names like FaXyz clutter the scope and hinder readability.

## ‚úÖ Correct (renamed alias import)

```tsx
import { FaSignOutAlt as SignOutIcon } from "react-icons/fa";

<SignOutIcon />
```

Giving a name that reflects the usage intention improves clarity and makes the code easier to read and maintain.

---

# üì• React Imports

Avoid importing the entire React module just to use types. This adds unnecessary code and goes against modern practices with automatic JSX (React 17+).

## ‚ùå Wrong (unnecessary full React import)

```tsx
import React from 'react';

type MyItemProps = {
  icon: React.ReactNode;
  text: string;
  href: string;
  active?: boolean;
};
```

## ‚úÖ Correct (only import what you need)

```tsx
import { ReactNode } from 'react';

type MyItemProps = {
  icon: ReactNode;
  text: string;
  href: string;
  active?: boolean;
};
```

---

# üì¶ Component Modularization

Each component should be in its **own file**. This ensures better organization, easier testing, reuse, and readability. Avoid grouping multiple components in a single file.

## ‚ùå Wrong (multiple components in the same file)

```tsx
// ButtonGroup.tsx
type ButtonProps = {
  text: string
  onClick: () => void
}

export const Button = ({ text, onClick }: ButtonProps) => {
  return <button onClick={onClick}>{text}</button>
}

export const SecondaryButton = ({ text }: { text: string }) => {
  return <button className="secondary">{text}</button>
}
```

This makes reuse, readability, and testability harder. It‚Äôs not scalable.

## ‚úÖ Correct (one component per file)

```tsx
// components/Button.tsx
type ButtonProps = {
  text: string
  onClick: () => void
}

export const Button = ({ text, onClick }: ButtonProps) => {
  return <button onClick={onClick}>{text}</button>
}
```

# üß© Prioritize Shadcn Components

Before creating a custom component, check if Shadcn already offers a suitable solution. This ensures visual consistency, accessibility, and reduces duplicate code.

## ‚ùå Wrong (creating a custom component unnecessarily)

```tsx
export const CustomButton = ({ text, onClick }: { text: string; onClick: () => void }) => {
  return (
    <button 
      className="bg-primary text-white px-4 py-2 rounded-md hover:bg-blue-600"
      onClick={onClick}
    >
      {text}
    </button>
  )
}
```

## ‚úÖ Correct (using Shadcn component)

```tsx
import { Button } from "@/components/ui/button"

export const ActionButton = ({ text, onClick }: { text: string; onClick: () => void }) => {
  return (
    <Button onClick={onClick}>
      {text}
    </Button>
  )
}
```

---

# Always use `return`

Even in simple components, always use `return`. It makes future logic insertion easier.

## ‚ùå Wrong (without return)

```tsx
const Button = () => <button>Click</button>
```

## ‚úÖ Correct (with return)

```tsx
const Button = () => {
  return <button>Click</button>
}
```

Using `return` ensures that adding logic (like conditionals or side effects) later is easier.

---

# üßæ Typing Props Without `React.FC`

Avoid using `React.FC` (or `React.FunctionComponent`) because it implicitly includes `children` and can lead to less precise prop definitions. It's clearer and more flexible to type your props manually.

## ‚ùå Wrong: Using `React.FC`

```tsx
import React from 'react'

type ButtonProps = {
  text: string
  onClick: () => void
}

const Button: React.FC<ButtonProps> = ({ text, onClick }) => {
  return <button onClick={onClick}>{text}</button>
}

const Input: React.FC<React.ComponentProps<'input'>> = (props) => {
  return <input {...props} />
}
```

Using `React.FC` here forces the component to accept `children` by default and adds unnecessary complexity.

## ‚úÖ Correct: Typing Props Manually

```tsx
import React, { ComponentProps } from 'react'

type ButtonProps = {
  text: string
  onClick: () => void
}

const Button = ({ text, onClick }: ButtonProps) => {
  return <button onClick={onClick}>{text}</button>
}

const Input = (props: ComponentProps<'input'>) => {
  return <input {...props} />
}
```

This approach keeps the type definitions more explicit and avoids implicit props like `children` unless you really want them.

---

# üìö Organiza√ß√£o dos Imports

Para manter a legibilidade e facilitar a manuten√ß√£o do c√≥digo, √© fundamental seguir uma ordem consistente nos imports. A ordem recomendada √©:

1. **Pacotes externos** (ex: `react`, `next`)
2. **Aliases** (ex: `@/components`, `@/utils`)
3. **Imports relativos** (`./`, `../`)

Seguindo essa estrutura, o c√≥digo fica mais organizado e f√°cil de navegar, especialmente em projetos maiores.

## ‚ùå Errado (imports desorganizados)

```tsx
import { useState } from 'react';
import {
  MenuItem,
  LogoLink,
  StorageCard,
  UserCard,
  mainMenuItems,
  footerMenuItems,
} from './menu';
import { usePathname } from 'next/navigation';
import { formatDate } from '@/utils/date';
```

- Os imports internos (./menu) est√£o misturados com pacotes externos.
- O alias (@/utils) est√° depois de um import relativo, o que n√£o √© o ideal.

## ‚úÖ Certo (organiza√ß√£o correta dos imports)

```tsx
import { useState } from 'react';
import { usePathname } from 'next/navigation';

import { formatDate } from '@/utils/date';
import {
  MenuItem,
  LogoLink,
  StorageCard,
  UserCard,
  mainMenuItems,
  footerMenuItems,
} from './menu';
```

- Pacotes externos v√™m primeiro.
- Depois, imports por alias **(@/)**.
- Por fim, imports relativos **(./)**.

---

# üîî Alertas com Toast (ShadCN)

Para exibir alertas, mensagens de sucesso, erro ou informa√ß√µes no projeto, **utilize o componente `toast` da biblioteca ShadCN**. Ele oferece uma interface elegante, consistente e de f√°cil integra√ß√£o com o design system do projeto.

---

## ‚úÖ Como usar corretamente

1. **Importe o hook `useToast`**:

```tsx
import { useToast } from "@/hooks/use-toast";
```

Utilize o toast onde for necess√°rio:

```tsx
const { toast } = useToast();

toast({
  title: "Scheduled: Catch up",
  description: "Friday, February 10, 2023 at 5:57 PM",
});
```

### üéØ Exemplo completo

```tsx
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";

export function AlertButton() {
  const { toast } = useToast();

  return (
    <Button
      onClick={() =>
        toast({
          title: "A√ß√£o realizada com sucesso!",
          description: "Seus dados foram salvos.",
        })
      }
    >
      Mostrar alerta
    </Button>
  );
}
```

# üßπ Verifica√ß√£o de Classes do Tema no Componente Base

Ao inspecionar o Figma ou usar um componente existente, sempre verifique se as **classes do tema** ou do **design system** j√° est√£o presentes no componente base. Isso evita a **duplica√ß√£o de classes** e mant√©m o c√≥digo mais limpo e organizado. Reutilizar o componente base garante **consist√™ncia** e facilita a **manuten√ß√£o** do projeto.

---

## ‚ùå Errado (Duplicando Classes no Componente Base)

**Componente `Button` Base (j√° com classes predefinidas no design system):**

```tsx
// Button.tsx (componente base)
export const Button = ({ children }: { children: React.ReactNode }) => {
  return (
    <button className="bg-blue-500 text-white p-3 rounded-md shadow-lg">
      {children}
    </button>
  );
};
```

Componente **CustomPage** (duplicando as classes no componente base):

```tsx
// CustomPage.tsx (utilizando o Button base, mas duplicando as classes)
import { Button } from "./Button";

export const CustomPage = () => {
  return (
    <div>
      <h1>P√°gina Personalizada</h1>
      <Button className="bg-blue-500 text-white p-3 rounded-md shadow-lg">Clique aqui</Button>
    </div>
  );
};
```

- Problema: O **CustomPage** est√° reaproveitando o componente **Button**, mas duplicou as classes definidas no componente base **Button** (**bg-blue-500**, **text-white**, **p-3**, **rounded-md**, **shadow-lg**). Isso cria duplica√ß√£o de estilos, pois o **Button** j√° possui essas classes internamente.
- **Consequ√™ncia**: Duplicar as classes torna o c√≥digo mais dif√≠cil de manter, j√° que qualquer modifica√ß√£o nos estilos do **Button** precisaria ser feita em v√°rios lugares, gerando inconsist√™ncia no design.

## ‚úÖ Certo (Usando o Componente Base Sem Duplicar as Classes)

```tsx
// Button.tsx (componente base)
import { Button } from "./Button";

const CustomPage = () => {
  return (
    <div>
      <h1>P√°gina Personalizada</h1>
      <Button>Clique aqui</Button>
    </div>
  );
};
```

- **Solu√ß√£o**: O componente **CustomPage** usa o componente **Button** base sem adicionar classes adicionais. O **Button** j√° est√° estilizado com as classes **bg-blue-500**, **text-white**, **p-3**, **rounded-md**, **shadow-lg** no componente base, portanto n√£o h√° necessidade de repetir essas classes no **CustomPage**.
- **Benef√≠cio**: O c√≥digo √© mais limpo, consistente e f√°cil de manter. Caso os estilos do **Button** precisem ser alterados, a mudan√ßa ser√° feita em um √∫nico lugar (no componente **Button**), garantindo uniformidade em todo o projeto.

---

# üî† Ordena√ß√£o Alfab√©tica nas Keywords de Import

Ao importar m√∫ltiplos itens de um mesmo m√≥dulo, **ordene-os em ordem alfab√©tica**. Isso facilita a leitura, evita duplica√ß√µes e melhora a organiza√ß√£o do c√≥digo.

---

## ‚ùå Errado (itens fora de ordem)

```tsx
import {
  UserCard,
  MenuItem,
  StorageCard,
} from './menu';
```

Os itens est√£o fora de ordem alfab√©tica, o que dificulta a visualiza√ß√£o r√°pida e pode gerar duplica√ß√µes acidentais.

## ‚úÖ Certo (ordenado alfabeticamente)

```tsx
import {
  MenuItem,
  StorageCard,
  UserCard,
} from './menu';
```

Importa√ß√µes organizadas de forma alfab√©tica, tornando o c√≥digo mais limpo e f√°cil de manter.

---

# üéØ Prompt: Exportando Componentes e Telas do Figma Usando Tailwind com Consist√™ncia

Sempre que estiver criando componentes ou telas com base em um design do Figma, **n√£o copie valores ao p√© da letra**.  
Antes de aplicar qualquer cor, tamanho, espa√ßamento, borda, tipografia, etc., verifique se esse valor j√° est√° **definido no tema do projeto** (ex: `globals.css`).  
Se estiver, **use o token do tema**. 
Se n√£o estiver, **use o valor mais pr√≥ximo** dispon√≠vel no design system.

---

### ‚úÖ Regras Gerais

- üîç **Verifique o tema (`globals.css`) antes de aplicar qualquer classe.**
- üé® **Use classes do Tailwind apenas com valores definidos no tema.**
- üß† **Se o valor no Figma for um pouco diferente (ex: `42px`) e n√£o existir no tema, escolha o valor mais pr√≥ximo** (ex: `40px`).
- ‚õî **Evite valores "m√°gicos" como `17px`, `#3A57E8`, `41.25px`, etc.**

---

### üí° Exemplo pr√°tico

**Design no Figma:**
- Cor: `#3A57E8`
- Altura do bot√£o: `42px`
- Padding horizontal: `18px`
- Border radius: `6px`
- Font size: `15px`
- Font weight: `500`

---

### ‚ùå Errado (copiando valores do Figma direto)

```tsx
<button
  style={{
    backgroundColor: '#3A57E8',
    height: '42px',
    padding: '10px 18px',
    borderRadius: '6px',
    fontSize: '15px',
    fontWeight: 500,
  }}
>
  Salvar
</button>
```

### ‚úÖ Certo (usando valores do tema no Tailwind)

```tsx
<button className="bg-primary h-10 px-4 py-2 rounded-md text-base font-medium">
  Salvar
</button>
```

| Propriedade        | Figma   | Tailwind Usado     | Justificativa                             |
| ------------------ | ------- | ------------------ | ----------------------------------------- |
| Cor                | #3A57E8 | `bg-primary`       | Cor j√° existe no tema                     |
| Altura             | 42px    | `h-10` (40px)      | Mais pr√≥ximo do valor no design system    |
| Padding horizontal | 18px    | `px-4` (16px)      | Valor padr√£o mais pr√≥ximo                 |
| Padding vertical   | 10px    | `py-2` (8px)       | Valor padr√£o mais pr√≥ximo                 |
| Border radius      | 6px     | `rounded-md`       | Valor equivalente no tema                 |
| Font size          | 15px    | `text-base` (16px) | 1px de diferen√ßa, sem impacto percept√≠vel |
| Font weight        | 500     | `font-medium`      | Valor correspondente                      |

---
